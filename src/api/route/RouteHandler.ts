import { ControllerResponse } from "./../controller/ControllerResponse"
import { Request, Response } from "express"
import { Controller } from "../controller/Controller"
import { HttpMethod } from "./HttpMethod"
import { Route } from "./Route"
import { RouteDescription } from "./RouteDescription"

/**
 * Represents the handler class for a collection of routes related to one another
 * Routes are generated by the descriptions provided in @link descriptions
 * @author Adam Rodrigues
 */
export abstract class RouteHandler {
  /**
   * The list of route descriptions the handler will use to generate the @link Route list
   */
  abstract descriptions: RouteDescription[]

  /**
   * The controller the route will use
   */
  readonly controller: Controller<any, any>

  /**
   * The list of routes generated by route descriptions
   */
  routes: Route[] = []

  /**
   * Constructs a new @link RouteHandler class
   * @param controller The @link Controller to use
   */
  constructor(controller: Controller<any, any>) {
    this.controller = controller
  }

  /**
   * Creates all the routes desribed in the @link descriptions
   */
  createRoutes = () => {
    this.routes = this.descriptions.map((description) =>
      this.createRoute(description)
    )
  }

  /**
   * Creates a route based from the @link RouteDescription provided
   * @param description The @link RouteDescription to use
   * @returns The @link Route created
   */
  private createRoute = (description: RouteDescription): Route => {
    if (description.include && description.exclude) {
      throw Error(
        "Invalid route description! Provided both include and exclude http route types."
      )
    }

    //Expose all the http types to the route
    let methods: HttpMethod[] = [
      HttpMethod.GET,
      HttpMethod.DELETE,
      HttpMethod.PATCH,
      HttpMethod.POST,
      HttpMethod.PUT,
    ]

    //If the include field is set the use these http types
    if (description.include !== undefined) {
      methods = description.include
      //If the exclude field is set then filter these http types out from the list
    }

    return {
      route: description.route,
      methods: methods,
      //If there is no controller specified in the route description then use the base controller of the route handler
      controller: description.controller || this.controller,
    }
  }

  connectControllerMethod = (
    req: Request,
    res: Response,
    httpMethod: HttpMethod
  ): ControllerResponse<any> => {
    const context = this.controller.createContext(req, res)
    switch (httpMethod) {
      case HttpMethod.GET:
        return this.controller.get(context)
      case HttpMethod.POST:
        return this.controller.create(context)
      case HttpMethod.PATCH:
        return this.controller.patch(context)
      case HttpMethod.PUT:
        return this.controller.put(context)
      case HttpMethod.DELETE:
        return this.controller.delete(context)
    }
  }
}
